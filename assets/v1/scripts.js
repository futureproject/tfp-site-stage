// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.checkInstagram = function() {
    var $content, instagram;
    $content = $('#instagram_content').empty();
    return instagram = $.getJSON('https://api.instagram.com/v1/users/363848267/media/recent/?client_id=eb730dfe68f24c80a1d0294297939f7e&callback=?', function(res) {
      var image, _i, _len, _ref, _results;
      _ref = res.data;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        image = _ref[_i];
        _results.push($content.append("<img src='" + image.images.standard_resolution.url + "' />"));
      }
      return _results;
    });
  };

  window.checkFacebook = function() {
    var $content;
    $content = $('#facebook_content').empty();
    return $.getJSON('https://graph.facebook.com/v2.0/tfpinspire/feed?access_token=132042490309344|d2b91ac7d0167419f3c68fdb1dea9e6b&callback=?', function(res) {
      var post, _i, _len, _ref, _results;
      _ref = res.data;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        post = _ref[_i];
        if (post.message != null) {
          _results.push($content.append("<p>" + post.message + "</p>"));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
  };

  window.updateContent = function() {
    checkInstagram();
    return checkFacebook();
  };

  $(function() {});

  window.tfp || (window.tfp = {});

  tfp.PhotoMover = (function() {
    function PhotoMover() {
      this.end = __bind(this.end, this);
      this.move = __bind(this.move, this);
      this.start = __bind(this.start, this);
    }

    PhotoMover.prototype.start = function(e) {
      var el;
      e.preventDefault();
      el = e.currentTarget;
      this.setTransitionDuration(el, '0');
      this.setTransitionProperty(el, '');
      $(el).on('mousemove.mover', this.move).on('mouseout.mover', this.end).on('mouseup.mover', this.end);
      $(el).on('touchmove.mover', this.move).on('touchend.mover', this.end);
      this.startPos = {
        x: e.screenX || e.originalEvent.pageX,
        y: e.screenY || e.originalEvent.pageY
      };
      return this.xOffset = this.yOffset = 0;
    };

    PhotoMover.prototype.move = function(e) {
      var el, transform;
      e.preventDefault();
      el = e.currentTarget;
      this.currentPos = {
        x: e.screenX || e.originalEvent.pageX,
        y: e.screenY || e.originalEvent.pageY
      };
      this.xOffset = this.currentPos.x - this.startPos.x;
      this.yOffset = this.currentPos.y - this.startPos.y;
      transform = "translate3d(" + this.xOffset + "px, " + this.yOffset + "px, 0)";
      return this.setTransform(el, transform);
    };

    PhotoMover.prototype.end = function(e) {
      var distance, el;
      this.xOffset || (this.xOffset = 0);
      this.yOffset || (this.yOffset = 0);
      el = e.currentTarget;
      distance = Math.sqrt(this.xOffset * this.xOffset + this.yOffset * this.yOffset);
      if (distance > 200) {
        this.next(el);
        this.setTransitionProperty(el, 'transform');
        this.setTransitionDuration(el, '.5s');
        this.setTransform(el, '');
      } else if (distance === 0) {
        this.nextOnClick(el);
      } else {
        this.setTransitionProperty(el, 'transform');
        this.setTransitionDuration(el, '.5s');
        this.setTransform(el, '');
      }
      $(el).off('mousemove.mover').off('mouseout.mover').off('mouseup.mover');
      return $(el).off('touchmove.mover').off('touchend.mover');
    };

    PhotoMover.prototype.next = function(img) {
      $(img).siblings().each(function() {
        var z;
        z = parseInt(this.style.zIndex);
        z += 1;
        return this.style.zIndex = z.toString();
      });
      return img.style.zIndex = '0';
    };

    PhotoMover.prototype.nextOnClick = function(el) {
      var x, y;
      x = [400, -400, 425, -425, 500, -500];
      y = [200, -200, 300, -300, 250, -250];
      x = x[Math.floor(Math.random() * 6)];
      y = y[Math.floor(Math.random() * 6)];
      this.setTransitionProperty(el, 'transform');
      this.setTransitionDuration(el, '.2s');
      this.setTransform(el, "translate3d(" + x + "px, " + y + "px, 0)");
      return setTimeout((function(_this) {
        return function() {
          var transform;
          transform = '';
          _this.setTransform(el, transform);
          return _this.next(el);
        };
      })(this), 200);
    };

    PhotoMover.prototype.setTransitionProperty = function(el, property) {
      el.style['transition-property'] = property;
      el.style['-webkit-transition-property'] = "-webkit-" + property;
      el.style.MozTransitionProperty = "-moz-" + property;
      el.style['-ms-transition-property'] = "-ms-" + property;
      return el.style['-o-transition-property'] = "-o-" + property;
    };

    PhotoMover.prototype.setTransitionDuration = function(el, duration) {
      el.style['transition-duration'] = duration;
      el.style['-webkit-transition-duration'] = duration;
      el.style.MozTransitionDuration = duration;
      el.style['-ms-transition-duration'] = duration;
      return el.style['-o-transition-duration'] = duration;
    };

    PhotoMover.prototype.setTransform = function(el, transform) {
      el.style['transform'] = transform;
      el.style['-webkit-transform'] = transform;
      el.style.MozTransform = transform;
      el.style['-ms-transform'] = transform;
      return el.style['-o-transform'] = transform;
    };

    return PhotoMover;

  })();

  $(function() {
    var initSlides, mover;
    mover = new tfp.PhotoMover;
    $(document).on('mousedown', '.photo-stack-photos img', mover.start);
    $(document).on('touchstart', '.photo-stack-photos img', mover.start);
    $(document).on('click', '.flip-front', function(e) {
      var vid;
      e.preventDefault();
      vid = $(this).closest('.flip-card').addClass('flipped').find('video').get(0);
      vid.src = vid.getAttribute('src');
      vid.load();
      return vid.play();
    });
    $(document).on('click', '.cities-nav a', function(event) {
      var container, self, url;
      self = this;
      $('.cities-nav li').each(function() {
        if (this.innerHTML === self.parentNode.innerHTML) {
          return this.classList.add('is-active');
        } else {
          return this.classList.remove('is-active');
        }
      });
      url = self.getAttribute('data-pjax');
      container = $(self.getAttribute('data-pjax-container'));
      event.preventDefault();
      return container.load(url, function(e) {
        return initSlides();
      });
    });
    initSlides = function() {
      return $('.swipe').each(function() {
        var s;
        s = Swipe(this);
        return $(this).on('click', 'nav', function(e) {
          $('video').each(function() {
            this.pause();
            if (this.currentTime > 0) {
              return this.currentTime = 0;
            }
          });
          $('.flip-card').removeClass('flipped');
          return s.next();
        });
      });
    };
    $('.cities-nav a').first().trigger('click');
    document.addEventListener('play', function(e) {
      return document.querySelector('body').classList.add('video-playing');
    }, true);
    document.addEventListener('pause', function(e) {
      return document.querySelector('body').classList.remove('video-playing');
    }, true);
    return document.addEventListener('ended', function(e) {
      return document.querySelector('body').classList.remove('video-playing');
    }, true);
  });

  window.tfp || (window.tfp = {});

  $(function() {
    $(document).on('click', '*[data-toggle]', function(e) {
      e.preventDefault();
      return $(this.getAttribute('data-toggle')).slideToggle();
    }).on('click.scrolling', 'a', function(e) {
      var error, hash, href, position, target;
      try {
        href = this.href;
        hash = this.getAttribute('href');
        target = document.querySelector(hash);
        if (hash.indexOf('#') === -1) {
          return true;
        } else if (target != null) {
          e.preventDefault();
          position = $(target).offset().top;
          return $('html, body').animate({
            scrollTop: position
          }, function() {
            return location.hash = hash;
          });
        }
      } catch (_error) {
        error = _error;
        return true;
      }
    });
    $('#offline_emphasis_trigger').on('click', function(e) {
      return $('#offline_emphasis').append('.');
    });
    return $('#hopsie_donation_form').on('click', 'input[type=checkbox]', function(e) {
      var $form;
      $form = $(this).closest('form');
      $form.find('input[type=checkbox]').not(this).each(function() {
        return this.checked = false;
      });
      return $form.find('input[name=recurring]').val(this.checked);
    });
  });

  window.tfp || (window.tfp = {});

  tfp.Map = (function() {
    function Map(element) {
      this.onCityElClick = __bind(this.onCityElClick, this);
      this.onZoom = __bind(this.onZoom, this);
      if (!(((typeof google !== "undefined" && google !== null ? google.maps : void 0) != null) && (element != null))) {
        return;
      }
      this.el = element;
      this.initialize();
    }

    Map.prototype.initialize = function() {
      var self;
      self = this;
      this.setMap();
      this.listen();
      return google.maps.event.addListenerOnce(this.google_map, 'idle', function(e) {
        return $.event.trigger('map:initialized', [self.google_map]);
      });
    };

    Map.prototype.setMap = function() {
      var customMapType;
      this.google_map = new google.maps.Map(this.el, {
        zoom: 4,
        center: new google.maps.LatLng(40.6743890, -98),
        mapTypeControlOptions: {
          mapTypeIds: []
        },
        mapTypeId: 'tfp',
        panControl: false
      });
      customMapType = new google.maps.StyledMapType([
        {
          stylers: [
            {
              hue: '#79d1eb'
            }, {
              visibility: 'simplified'
            }, {
              gamma: 0.5
            }, {
              weight: 0.5
            }
          ]
        }, {
          elementType: 'labels',
          stylers: [
            {
              visibility: 'off'
            }
          ]
        }, {
          featureType: 'water',
          stylers: [
            {
              color: '#121e29'
            }
          ]
        }
      ]);
      return this.google_map.mapTypes.set('tfp', customMapType);
    };

    Map.prototype.listen = function() {
      this.google_map.addListener('zoom_changed', this.onZoom);
      return $(document).on('cityEl:clicked', this.onCityElClick);
    };

    Map.prototype.onZoom = function(e) {
      return $.event.trigger('map:zoom_changed', [this.google_map.getZoom()]);
    };

    Map.prototype.onCityElClick = function(e, marker, zoom) {
      zoom = zoom || 13;
      zoom = parseFloat(zoom);
      this.google_map.setZoom(zoom);
      return this.google_map.setCenter(marker.getPosition());
    };

    return Map;

  })();

  tfp.City = (function() {
    function City(element) {
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      if (!(((typeof google !== "undefined" && google !== null ? google.maps : void 0) != null) && (element != null))) {
        return;
      }
      this.el = element;
      this.initialize();
      this.show();
      this.listen();
    }

    City.prototype.initialize = function() {
      var icon_url;
      this.lat = parseFloat(this.el.getAttribute('data-lat'));
      this.lng = parseFloat(this.el.getAttribute('data-lng'));
      this.title = this.el.getAttribute('data-title');
      this.group = this.el.getAttribute('data-group');
      this.zoom = this.el.getAttribute('data-zoom');
      icon_url = (function() {
        switch (false) {
          case this.group !== 'current':
            return '/assets/map_cluster.png';
          case this.group !== 'next':
            return '/assets/map_triangle.png';
          default:
            return '/assets/map_square.png';
        }
      }).call(this);
      return this.marker = new google.maps.Marker({
        position: new google.maps.LatLng(this.lat, this.lng),
        title: this.title,
        labelContent: this.title,
        labelClass: 'map_label',
        icon: {
          url: icon_url,
          scaledSize: new google.maps.Size(24, 24)
        }
      });
    };

    City.prototype.listen = function() {
      var self;
      self = this;
      $(document).on('map:initialized', function(e, map) {
        self.map = map;
        return self.show();
      }).on('map:zoom_changed', function(e, zoomLevel) {
        if (self.group !== 'current') {
          return;
        }
        if (zoomLevel > 10) {
          return self.hide();
        } else {
          if (!self.showing) {
            return self.show();
          }
        }
      }).on('cities:filter', function(e, group) {
        if (self.group === group) {
          return self.toggle();
        }
      });
      this.marker.addListener('click', (function(_this) {
        return function(e) {
          _this.map.setZoom(_this.map.getZoom() + 2);
          return _this.map.setCenter(_this.marker.getPosition());
        };
      })(this));
      return $(this.el).on('click', (function(_this) {
        return function(e) {
          e.preventDefault();
          e.stopPropagation();
          return $.event.trigger('cityEl:clicked', [_this.marker, _this.zoom]);
        };
      })(this));
    };

    City.prototype.toggle = function() {
      if (this.showing) {
        return this.hide();
      } else {
        return this.show();
      }
    };

    City.prototype.show = function() {
      this.showing = true;
      return this.marker.setMap(this.map);
    };

    City.prototype.hide = function() {
      this.showing = false;
      return this.marker.setMap(null);
    };

    return City;

  })();

  tfp.School = (function() {
    function School(element) {
      if (!(((typeof google !== "undefined" && google !== null ? google.maps : void 0) != null) && (element != null))) {
        return;
      }
      this.el = element;
      this.initialize();
      this.listen();
    }

    School.prototype.initialize = function() {
      this.lat = parseFloat(this.el.getAttribute('data-lat'));
      this.lng = parseFloat(this.el.getAttribute('data-lng'));
      this.title = this.el.getAttribute('data-title');
      this.overlay = this.el;
      return this.marker = new MarkerWithLabel({
        position: new google.maps.LatLng(this.lat, this.lng),
        title: this.title,
        overlayElem: this.overlay,
        labelContent: this.title,
        labelClass: 'map_label',
        icon: {
          url: '/assets/map_arrow.png',
          scaledSize: new google.maps.Size(24, 28)
        }
      });
    };

    School.prototype.listen = function() {
      var self;
      self = this;
      $(document).on('map:initialized', function(e, map) {
        return self.map = map;
      }).on('map:zoom_changed', function(e, zoomLevel) {
        if (zoomLevel > 10) {
          if (!self.showing) {
            return self.show();
          }
        } else {
          return self.hide();
        }
      });
      return this.marker.addListener('click', function() {
        return $.event.trigger('schoolClick', this.overlayElem);
      });
    };

    School.prototype.show = function() {
      this.showing = true;
      return this.marker.setMap(this.map);
    };

    School.prototype.hide = function() {
      this.showing = false;
      return this.marker.setMap(null);
    };

    return School;

  })();

  $(function() {
    tfp.cities = [];
    tfp.schools = [];
    $('.map_city').each(function() {
      return tfp.cities.push(new tfp.City(this));
    });
    $('#school_overlays').children().each(function() {
      return tfp.schools.push(new tfp.School(this));
    });
    return tfp.map = new tfp.Map(document.getElementById('map_canvas'));
  });

  window.tfp || (window.tfp = {});

  tfp.SchoolsController = (function() {
    function SchoolsController() {
      this.onMapClick = __bind(this.onMapClick, this);
      this.next = __bind(this.next, this);
      this.hide = __bind(this.hide, this);
      this.$el = $("<div class='map_overlay' />").hide().appendTo('body');
      this.listen();
    }

    SchoolsController.prototype.listen = function() {
      return $(document).on('schoolClick', this.onMapClick);
    };

    SchoolsController.prototype.show = function(overlay) {
      this.$school = $(overlay);
      this.$el.html(this.$school.clone());
      this.$el.fadeIn();
      this.$el.one('click', '.close_button', this.hide);
      return this.$el.one('click', '.next_button', this.next);
    };

    SchoolsController.prototype.hide = function() {
      return this.$el.fadeOut();
    };

    SchoolsController.prototype.next = function() {
      var overlay;
      overlay = this.$school.next() || this.$school.siblings().get(0);
      if (overlay.length === 0) {
        overlay = this.$school.siblings().get(0);
      }
      return this.show(overlay);
    };

    SchoolsController.prototype.onMapClick = function(e, overlay) {
      return this.show(overlay);
    };

    SchoolsController.prototype.start = function() {
      var _ref;
      if (this.$el.is(':visible')) {
        return true;
      } else if ((_ref = tfp.schools) != null ? _ref[0] : void 0) {
        return this.show(tfp.schools[0].overlay);
      } else {
        return true;
      }
    };

    return SchoolsController;

  })();

  $(function() {
    tfp.schoolsController = new tfp.SchoolsController();
    return $(document).on('click', '.browse_schools', function(e) {
      e.stopPropagation();
      return tfp.schoolsController.start();
    }).on('click', '.map_filter', function(e) {
      $.event.trigger('cities:filter', [this.getAttribute('data-group')]);
      return $(this).toggleClass('is_disabled');
    });
  });

  window.tfp || (window.tfp = {});

  $(function() {
    return $('.swipe').each(function() {
      var $bullet, $bullets, $footer, $t, i, s;
      $t = $(this);
      s = Swipe(this, {
        auto: $t.attr('data-auto'),
        callback: function(pos) {
          var $bullets, error;
          $bullets = $t.find('.swipe_bullet');
          $bullets.each(function() {
            return this.classList.remove('is_active');
          });
          try {
            return $bullets.get(pos).classList.add('is_active');
          } catch (_error) {
            error = _error;
          }
        }
      });
      $footer = $t.find('footer');
      $bullets = $('<ul class="swipe_bullets" />').appendTo($footer);
      i = 0;
      while (i < s.getNumSlides()) {
        $bullet = $("<li class='swipe_bullet' />").attr('data-slide', i).on('click', function(e) {
          return s.slide(this.getAttribute('data-slide'));
        }).appendTo($bullets);
        if (i === 0) {
          $bullet.addClass('is_active');
        }
        i += 1;
      }
      $footer.append($bullets);
      if ($t.attr('data-oneclick') != null) {
        $t.on('click', function(e) {
          return s.next();
        });
      }
      return $(document).on('slideshows:pause', function() {
        return s.stop();
      });
    });
  });

  window.tfp || (window.tfp = {});

  $(function() {
    $(".videobox").each(function() {
      var $caption, $player, $t, $videos;
      $t = $(this);
      $player = $t.find('iframe');
      $caption = $t.find('.video_caption');
      $videos = $('a[target]');
      $videos.on('click', function(e) {
        var caption;
        $(this).addClass('is_active').siblings().removeClass('is_active');
        $player.attr('src', this.href);
        caption = this.getAttribute('data-caption');
        if (caption != null) {
          return $caption.text(caption);
        } else {
          return $caption.html('&nbsp;');
        }
      });
      return $videos.first().click();
    });
    if (!Modernizr.touch && !!Modernizr.video.h264) {
      $("#homepage-feature").append('<video autoplay loop> <source src="http://s3.amazonaws.com/tfp-website-stage/homepage.mov" type="video/mp4"> </video>');
    }
    return $('.very-large-video-toggle').on('click', function(e) {
      var $t, vimeo_id;
      e.preventDefault();
      $t = $(this);
      vimeo_id = $t.attr('href').split('/').pop();
      $(document).trigger('slideshows:pause');
      return $t.closest('.feature').html("<iframe src='//player.vimeo.com/video/" + vimeo_id + "?autoplay=1' frameborder=0 webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>");
    });
  });

  window.tfp || (window.tfp = {});

  tfp.personBios = [];

  tfp.PersonBio = (function() {
    function PersonBio(args) {
      this.toggle = __bind(this.toggle, this);
      this.el = args.el;
      this.$el = $(args.el);
      this.collection = args.collection;
      this.$box = $("<div class='bio_box' />").hide();
      this.$section = this.$el.closest('section');
      this.listen();
    }

    PersonBio.prototype.listen = function() {
      return this.$el.on('click', this.toggle);
    };

    PersonBio.prototype.toggle = function() {
      if (this.$box.is(':visible')) {
        return this.hide();
      } else {
        return this.show();
      }
    };

    PersonBio.prototype.hide = function() {
      this.$el.removeClass('is_active').siblings().css('margin-top', '');
      this.$section.css('margin-bottom', '');
      return this.$box.fadeOut('slow', (function(_this) {
        return function() {
          return _this.$box.remove();
        };
      })(this));
    };

    PersonBio.prototype.hideOthers = function() {
      var bio, _i, _len, _ref, _results;
      _ref = tfp.personBios;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bio = _ref[_i];
        _results.push(bio.hide());
      }
      return _results;
    };

    PersonBio.prototype.show = function() {
      this.hideOthers();
      this.setBoxContent();
      this.insertBox();
      this.$el.addClass('is_active');
      this.$box.fadeIn('fast');
      if (Math.abs($('body').scrollTop() - this.$el.offset().top) > 100) {
        return $('html, body').animate({
          scrollTop: this.$el.offset().top
        });
      }
    };

    PersonBio.prototype.setBoxContent = function() {
      return this.$box.html("<div class='bio_box_content'>" + this.$el.find('.bio').html() + "</div>");
    };

    PersonBio.prototype.insertBox = function() {
      var $box, $el;
      this.$el.closest('article').append(this.$box);
      this.$box.css({
        position: 'absolute',
        top: this.$el.offset().top + 2 + this.$el.height() + 'px',
        left: 0,
        right: 0
      });
      $el = this.$el;
      $box = this.$box;
      this.$section.css('margin-bottom', this.$box.height() + 'px');
      return this.$el.nextAll().each(function() {
        var $t;
        $t = $(this);
        if (!($t.offset().top > $el.offset().top)) {
          return;
        }
        return $t.css('margin-top', $box.height() + 20 + 'px');
      });
    };

    return PersonBio;

  })();

  $(function() {
    $('.person:not([data-hide-bio])').each(function() {
      return tfp.personBios.push(new tfp.PersonBio({
        el: this,
        collection: tfp.personBios
      }));
    });
    $('article.who .filterable').find('.person').each(function() {
      if (!this.classList.contains('ny')) {
        return this.style.display = 'none';
      }
    });
    $(window).on('load', function(e) {
      return $('article.who .filterable').isotope({
        filter: '.ny',
        layout: 'fitRows'
      });
    });
    return $('.filters li').on('click', function(e) {
      var bio, filter, _i, _len, _ref;
      _ref = tfp.personBios;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bio = _ref[_i];
        bio.hide();
      }
      filter = this.getAttribute('data-filter');
      $(this).addClass('is_active').siblings().removeClass('is_active');
      return $('.filterable').isotope({
        filter: filter,
        layoutMode: 'fitRows'
      }).isotope('bindResize');
    });
  });

}).call(this);
